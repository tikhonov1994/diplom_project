version: '3.9'

volumes:
  nginx_logs:
  pg_volume:
  secure_pg_volume:
  nginx_volume:
  redis_volume:
  esdata:

include:
  - ./deploy/mongo/docker-compose.yml
  - ./deploy/elk/docker-compose.yml
  - ./deploy/kafka/docker-compose.yml
  - ./deploy/clickhouse/docker-compose.yml
  - ./deploy/elastic/docker-compose.yml
  - ./deploy/rabbitmq/docker-compose.yml

networks:
  application_network:
    driver: bridge

x-net-topology:
  &container_networks
  networks:
    - application_network
    - mongo_network
    - elk_network
    - clickhouse_network
    - elastic_network
    - kafka_network
    - rabbitmq_network

services:
  db:
    container_name: postgres
    profiles:
      - "all"
      - "etl"
      - "auth"
      - "admin"
      - "notification_api"
    image: postgres:13.0-alpine
    volumes:
      - pg_volume:/var/lib/postgresql/data/
    env_file:
      - .env
    <<: *container_networks

  secure_db:
    container_name: postgres
    profiles:
      - "all"
      # - "any"
    image: postgres:13.0-alpine
    volumes:
      - secure_pg_volume:/var/lib/postgresql/data/
    env_file:
      - .env
    <<: *container_networks

  redis:
    container_name: redis
    profiles:
      - "all"
      - "api"
      - "auth"
      - "admin"
    image: redis:7.0.5
    restart: always
    volumes:
      - redis_volume:/data
    healthcheck:
      test: [ "CMD", "redis-cli", "--raw", "incr", "ping" ]
      interval: 5s
      timeout: 5s
      retries: 5
    expose:
      - 6379
    <<: *container_networks

  jaeger:
    container_name: jaeger
    profiles:
      - "all"
    image: jaegertracing/all-in-one:latest
    expose:
      - "6831"
      - "16686"
    depends_on:
      auth:
        condition: service_started
    <<: *container_networks

  etl:
    container_name: etl
    profiles:
      - "all"
      - "etl"
    build:
      context: etl
    restart: always
    env_file:
      - .env
    depends_on:
      elastic_migrate:
        condition: service_completed_successfully
      db:
        condition: service_started
    <<: *container_networks

  ugc_etl:
    container_name: ugc_etl
    profiles:
      - "all"
      - "ugc_etl"
    build: ./ugc_etl
    env_file:
      - .env
    depends_on:
      broker:
        condition: service_healthy
      clickhouse1:
        condition: service_healthy
    <<: *container_networks

  api:
    container_name: api
    profiles:
      - "all"
      - "api"
    build: ./api
    image: movies_api
    depends_on:
      elastic_migrate:
        condition: service_completed_successfully
      redis:
        condition: service_started
    expose:
      - "8001"
    env_file:
      - .env
    <<: *container_networks

  auth:
    container_name: auth
    profiles:
      - "all"
      - "auth"
    build: ./auth
    image: movies_auth
    depends_on:
      redis:
        condition: service_started
      db:
        condition: service_started
    expose:
      - "8002"
    env_file:
      - .env
    <<: *container_networks

  admin:
    container_name: admin
    profiles:
      - "all"
      - "admin"
    build: ./admin
    image: movies_admin
    command: /bin/sh "run_uwsgi.sh"
    entrypoint: /bin/sh "run_uwsgi.sh"
    depends_on:
      db:
        condition: service_started
    expose:
      - "8000"
    env_file:
      - .env
    volumes:
      - nginx_volume:/opt/app/static
    <<: *container_networks

  celery_app:
    build: ./admin
    container_name: celery_app
    profiles:
    - "all"
    - "admin"
    env_file:
      - .env
    command: ["python3", '-m', "celery", "-A", "tasks", "worker", "-l", "info"]
    <<: *container_networks

  celery-beat:
    build: ./admin
    container_name: celery_beat
    profiles:
    - "all"
    - "admin"
    env_file:
      - .env
    command: ["python3", '-m', "celery", "-A", "tasks", "beat", "-l", "info"]
    <<: *container_networks

  ugc_api:
    container_name: ugc_api
    profiles:
      - "all"
      - "ugc_api"
    build: ./ugc
    image: movies_ugc
    depends_on:
      broker:
        condition: service_healthy
    expose:
      - "8003"
    env_file:
      - .env
    <<: *container_networks

  social_api:
    container_name: social_api
    profiles:
      - "all"
      - "social_api"
    build: ./social
    image: movies_social
    depends_on:
      mongos:
        condition: service_started
    expose:
      - "8010"
    env_file:
      - .env
    <<: *container_networks

  email_handler:
    container_name: email_handler
    profiles:
      - "all"
      - "email_handlers"
    build: ./email_handler
    image: email_handler
    depends_on:
      rabbitmq:
        condition: service_healthy
    expose:
      - "8011"
    env_file:
      - .env
    <<: *container_networks

  websocket:
    container_name: websocket
    profiles:
      - "all"
      - "websocket_handlers"
    build: ./websocket
    image: websocket
    depends_on:
      rabbitmq:
        condition: service_healthy
    env_file:
      - .env
    <<: *container_networks

  notification_api:
    container_name: notification_api
    profiles:
      - "all"
      - "notification_api"
    build: ./notification
    depends_on:
      db:
        condition: service_started
      rabbitmq:
        condition: service_healthy
    expose:
      - "8005"
    env_file:
      - .env
    <<: *container_networks

  nginx:
    container_name: nginx
    image: nginx:latest
    volumes:
      - ./deploy/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./deploy/nginx/configs:/etc/nginx/conf.d:ro
      - nginx_volume:/opt/app/static
      - nginx_logs:/var/log/nginx/
    ports:
      - "80:80"
    <<: *container_networks

  mailhog:
    container_name: mailhog
    image: mailhog/mailhog
    ports:
      - "1025:1025"
      - "8025:8025"
    <<: *container_networks
